#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0 on Sun Jul 28 14:53:01 2019
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

from pathlib import Path
from os import walk
from glob import glob

def get_num_dirs_files(root_dir):
    dirs = next(walk(root_dir))[1]
    files = next(walk(root_dir))[2]
    return (len(dirs), len(files))

def get_plural(n, str1, str2=''):
    if n == 1:
        return str1
    elif str2 == '':
        return str1 + 's'
    else:
        return str2

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 300))
        self.panel = wx.Panel(self, wx.ID_ANY)
        self.text_ctrl_filepattern = wx.TextCtrl(self.panel, wx.ID_ANY, "*.py")
        self.text_ctrl_src = wx.DirPickerCtrl(self.panel, wx.ID_ANY, "/home/satish/", style=wx.DIRP_USE_TEXTCTRL)
        self.text_ctrl_dest = wx.DirPickerCtrl(self.panel, wx.ID_ANY, "/home/satish/Documents", style=wx.DIRP_USE_TEXTCTRL)
        self.text_ctrl_subjects = wx.TextCtrl(self.panel, wx.ID_ANY, "*")
        self.text_ctrl_1 = wx.TextCtrl(self.panel, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.btn_scandirs = wx.Button(self.panel, wx.ID_ANY, "Scan for Folders")
        self.btn_beginaudit = wx.Button(self.panel, wx.ID_ANY, "Begin Audit")
        self.btn_exit = wx.Button(self.panel, wx.ID_ANY, "Exit")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT, self.on_change_fp, self.text_ctrl_filepattern)
        self.Bind(wx.EVT_BUTTON, self.on_btn_scandirs, self.btn_scandirs)
        self.Bind(wx.EVT_BUTTON, self.on_btn_beginaudit, self.btn_beginaudit)
        self.Bind(wx.EVT_BUTTON, self.on_btn_exit, self.btn_exit)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(f"Audit {self.text_ctrl_filepattern.GetValue()} files")
        self.text_ctrl_1.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        vbox = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(4, 2, 10, 10)
        label_4 = wx.StaticText(self.panel, wx.ID_ANY, "File pattern")
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.text_ctrl_filepattern, 0, wx.EXPAND, 0)
        label_1 = wx.StaticText(self.panel, wx.ID_ANY, "Source folder")
        grid_sizer_1.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.text_ctrl_src, 0, wx.EXPAND, 0)
        label_2 = wx.StaticText(self.panel, wx.ID_ANY, "Destination folder")
        grid_sizer_1.Add(label_2, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.text_ctrl_dest, 0, wx.EXPAND, 0)
        label_3 = wx.StaticText(self.panel, wx.ID_ANY, "Subject list")
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.text_ctrl_subjects, 0, wx.EXPAND, 0)
        grid_sizer_1.AddGrowableCol(1)
        sizer_4.Add(grid_sizer_1, 0, wx.EXPAND, 0)
        sizer_4.Add(self.text_ctrl_1, 1, wx.EXPAND | wx.TOP, 5)
        sizer_2.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 10)
        sizer_3.Add(self.btn_scandirs, 0, wx.ALIGN_CENTER, 0)
        sizer_3.Add(self.btn_beginaudit, 0, wx.ALIGN_CENTER, 0)
        sizer_3.Add(self.btn_exit, 0, wx.ALIGN_CENTER, 0)
        sizer_2.Add(sizer_3, 0, wx.ALIGN_CENTER | wx.BOTTOM, 10)
        self.panel.SetSizer(sizer_2)
        vbox.Add(self.panel, 1, wx.EXPAND, 0)
        mainSizer.Add(vbox, 1, wx.EXPAND, 0)
        self.SetSizer(mainSizer)
        self.Layout()
        # end wxGlade

    def on_btn_scandirs(self, event):  # wxGlade: MyFrame.<event_handler>
        root_dir = self.text_ctrl_src.GetPath()
        p = Path(root_dir)
        subject_patterns = self.text_ctrl_subjects.GetValue()
        print(f'INFO: Scanning {root_dir} for folders matching "{subject_patterns}"')
        subject_pattern_list = subject_patterns.split()
        for subject_pattern in subject_pattern_list:
            subjects = p.glob(subject_pattern)
            for subject in subjects:
                root_dir = p
                print('INFO:', root_dir)
                d, f = get_num_dirs_files(root_dir)
                print(f'{subject} has {d} {get_plural(d, "folder")} and {f} {get_plural(f, "file")}')
        event.Skip()

    def on_btn_exit(self, event):  # wxGlade: MyFrame.<event_handler>
        self.Close()

    def get_folder_info(self, root_dir):
        p = Path(root_dir)

    def on_btn_beginaudit(self, event):  # wxGlade: MyFrame.<event_handler>
        root_dir = self.text_ctrl_src.GetPath()
        p = Path(root_dir)
        filepattern = self.text_ctrl_filepattern.GetValue()
        subject_patterns = self.text_ctrl_subjects.GetValue()
        print(f'INFO: Scanning {root_dir} for folders matching "{subject_patterns}"')
        subject_pattern_list = subject_patterns.split()
        for subject_pattern in subject_pattern_list:
            subjects = p.glob(subject_pattern)
            for subject in subjects:
                files = p.joinpath(subject).glob('**/'+filepattern)
                print(f'{subject}')
                for file in files:
                    print(f'\t{file}')
        event.Skip()
    def on_change_fp(self, event):  # wxGlade: MyFrame.<event_handler>
        self.SetTitle(f"Audit {self.text_ctrl_filepattern.GetValue()} files")
        event.Skip()
# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MyFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
